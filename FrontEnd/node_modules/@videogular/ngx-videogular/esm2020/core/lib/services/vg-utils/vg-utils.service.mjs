import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class VgUtilsService {
    /**
     * Inspired by Paul Irish
     * https://gist.github.com/paulirish/211209
     */
    static getZIndex() {
        let zIndex = 1;
        let elementZIndex;
        const tags = document.getElementsByTagName('*');
        for (let i = 0, l = tags.length; i < l; i++) {
            elementZIndex = parseInt(window.getComputedStyle(tags[i])['z-index'], 10);
            if (elementZIndex > zIndex) {
                zIndex = elementZIndex + 1;
            }
        }
        return zIndex;
    }
    // Very simple mobile detection, not 100% reliable
    static isMobileDevice() {
        // return (
        //   typeof window.screen.orientation !== 'undefined' ||
        //   navigator.userAgent.indexOf('IEMobile') !== -1
        // );
        // window.orientation is deprecated and we should use window.screen.orientation
        return (typeof window.orientation !== 'undefined' ||
            navigator.userAgent.indexOf('IEMobile') !== -1);
    }
    static isiOSDevice() {
        return ((navigator.userAgent.match(/ip(hone|ad|od)/i) ||
            VgUtilsService.isIpadOS()) &&
            !navigator.userAgent.match(/(iemobile)[\/\s]?([\w\.]*)/i));
    }
    static isIpadOS() {
        return (navigator.maxTouchPoints &&
            navigator.maxTouchPoints > 2 &&
            /MacIntel/.test(navigator.platform));
    }
    static isCordova() {
        return (document.URL.indexOf('http://') === -1 &&
            document.URL.indexOf('https://') === -1);
    }
}
/** @nocollapse */ VgUtilsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: VgUtilsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ VgUtilsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: VgUtilsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: VgUtilsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctdXRpbHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LXZpZGVvZ3VsYXIvY29yZS9zcmMvbGliL3NlcnZpY2VzL3ZnLXV0aWxzL3ZnLXV0aWxzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLM0MsTUFBTSxPQUFPLGNBQWM7SUFDekI7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFNBQVM7UUFDZCxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLGFBQXFCLENBQUM7UUFFMUIsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWhELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFMUUsSUFBSSxhQUFhLEdBQUcsTUFBTSxFQUFFO2dCQUMxQixNQUFNLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQzthQUM1QjtTQUNGO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxNQUFNLENBQUMsY0FBYztRQUNuQixXQUFXO1FBQ1gsd0RBQXdEO1FBQ3hELG1EQUFtRDtRQUNuRCxLQUFLO1FBRUwsK0VBQStFO1FBQy9FLE9BQU8sQ0FDTCxPQUFPLE1BQU0sQ0FBQyxXQUFXLEtBQUssV0FBVztZQUN6QyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDL0MsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVztRQUNoQixPQUFPLENBQ0wsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztZQUM3QyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUMxRCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRO1FBQ2IsT0FBTyxDQUNMLFNBQVMsQ0FBQyxjQUFjO1lBQ3hCLFNBQVMsQ0FBQyxjQUFjLEdBQUcsQ0FBQztZQUM1QixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDcEMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUztRQUNkLE9BQU8sQ0FDTCxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3hDLENBQUM7SUFDSixDQUFDOzs4SEF6RFUsY0FBYztrSUFBZCxjQUFjLGNBRmIsTUFBTTsyRkFFUCxjQUFjO2tCQUgxQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFZnVXRpbHNTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIEluc3BpcmVkIGJ5IFBhdWwgSXJpc2hcbiAgICogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzIxMTIwOVxuICAgKi9cbiAgc3RhdGljIGdldFpJbmRleCgpOiBudW1iZXIge1xuICAgIGxldCB6SW5kZXggPSAxO1xuICAgIGxldCBlbGVtZW50WkluZGV4OiBudW1iZXI7XG5cbiAgICBjb25zdCB0YWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGFncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGVsZW1lbnRaSW5kZXggPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YWdzW2ldKVsnei1pbmRleCddLCAxMCk7XG5cbiAgICAgIGlmIChlbGVtZW50WkluZGV4ID4gekluZGV4KSB7XG4gICAgICAgIHpJbmRleCA9IGVsZW1lbnRaSW5kZXggKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB6SW5kZXg7XG4gIH1cblxuICAvLyBWZXJ5IHNpbXBsZSBtb2JpbGUgZGV0ZWN0aW9uLCBub3QgMTAwJSByZWxpYWJsZVxuICBzdGF0aWMgaXNNb2JpbGVEZXZpY2UoKSB7XG4gICAgLy8gcmV0dXJuIChcbiAgICAvLyAgIHR5cGVvZiB3aW5kb3cuc2NyZWVuLm9yaWVudGF0aW9uICE9PSAndW5kZWZpbmVkJyB8fFxuICAgIC8vICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdJRU1vYmlsZScpICE9PSAtMVxuICAgIC8vICk7XG5cbiAgICAvLyB3aW5kb3cub3JpZW50YXRpb24gaXMgZGVwcmVjYXRlZCBhbmQgd2Ugc2hvdWxkIHVzZSB3aW5kb3cuc2NyZWVuLm9yaWVudGF0aW9uXG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiB3aW5kb3cub3JpZW50YXRpb24gIT09ICd1bmRlZmluZWQnIHx8XG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0lFTW9iaWxlJykgIT09IC0xXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBpc2lPU0RldmljZSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lwKGhvbmV8YWR8b2QpL2kpIHx8IFxuICAgICAgVmdVdGlsc1NlcnZpY2UuaXNJcGFkT1MoKSkgJiZcbiAgICAgICFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oaWVtb2JpbGUpW1xcL1xcc10/KFtcXHdcXC5dKikvaSlcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGlzSXBhZE9TKCkge1xuICAgIHJldHVybiAoXG4gICAgICBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgJiYgXG4gICAgICBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAyICYmXG4gICAgICAvTWFjSW50ZWwvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgaXNDb3Jkb3ZhKCkge1xuICAgIHJldHVybiAoXG4gICAgICBkb2N1bWVudC5VUkwuaW5kZXhPZignaHR0cDovLycpID09PSAtMSAmJlxuICAgICAgZG9jdW1lbnQuVVJMLmluZGV4T2YoJ2h0dHBzOi8vJykgPT09IC0xXG4gICAgKTtcbiAgfVxufVxuIl19